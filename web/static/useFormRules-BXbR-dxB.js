import{z as p,cj as f,ck as E,M as s,cl as h,cm as m}from"./index-gzDiX6cq.js";const I=/^[^\u4e00-\u9fa5]+$/,F=()=>{const{t:r}=p(),c=()=>[{pattern:f,message:r("Base.commonIdError")}],a=()=>[{pattern:/^[A-Za-z]+[A-Za-z0-9-_]*$/,message:r("Base.letterBeginError")}],R=()=>[{pattern:I,message:r("Base.notSupportedChinese")}],d=()=>[{pattern:E,message:r("Rule.formatError"),trigger:"blur"}],g=(t,e="input")=>{let u="";return t?u=r(e==="input"?"Rule.inputFieldRequiredError":"Rule.selectFieldRequiredError",{name:t}):u=r(e==="input"?"Rule.inputRequired":"Rule.selectRequired"),[{message:u,required:!0}]},l=(t,e)=>{if(t===void 0&&e===void 0)return[];const u=t!==void 0&&e!==void 0?r("Rule.errorRange",{min:t,max:e}):t!==void 0?r("Rule.minimumError",{min:t}):r("Rule.maximumError",{max:e});return[{type:"number",min:t,max:e,message:u,trigger:"change"}]};return{createRequiredRule:g,createIntFieldRule:(t,e)=>s.isUndefined(t)&&s.isUndefined(e)?[{type:"number",message:r("Rule.errorType",{type:r("Rule.int")}),trigger:"blur"}]:l(t,e),createNumRangeRule:l,createCommonIdRule:c,createLetterStartRule:a,createNoChineseRule:R,createLimiterRule:d,createStringWithUnitFieldRule:(t,e,u)=>{const n=[{validator(i,o){return m(o,t)?[]:[new Error(r("Rule.formatError"))]},trigger:"blur"}];return e!==void 0&&u!==void 0&&n.push({validator(i,o){return h(parseFloat(o),e,u)?[]:[new Error(r("Rule.errorRange",{min:e,max:u}))]},trigger:"change"}),n},createMqttPublishTopicRule:()=>[{validator(t,e){return e?e.length>65535?[new Error(r("Rule.errorTopicLengthExceedLimit"))]:/[+#]/.test(e)?[new Error(r("Rule.errorInvalidCharacterInPublish"))]:[]:[]},trigger:"blur"}],createMqttSubscribeTopicRule:()=>[{validator(t,e){if(!e)return[];if(e.length>65535)return[new Error(r("Rule.errorTopicLengthExceedLimit"))];const u=e.split("/");for(let n=0;n<u.length;n++){const i=u[n];if(i==="#"){if(n!==u.length-1)return[new Error(r("Rule.errorInvalidUseOfHashWildcard"))]}else if(i.includes("#"))return[new Error(r("Rule.errorInvalidUseOfHashWildcard"))];if(i.includes("+")&&i!=="+")return[new Error(r("Rule.errorInvalidUseOfPlusWildcard"))]}return[]},trigger:"blur"}]}};export{F as u};
