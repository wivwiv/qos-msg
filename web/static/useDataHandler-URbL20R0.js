import{bB as G,M as g,aD as A,aT as R,g as T,b6 as S,c3 as M,aS as L,q as E,a5 as O,b5 as K,by as q,a2 as V}from"./index-Dp_94g6t.js";import"./http-DdqGSA6b.js";import{u as z}from"./useOperationConfirm-DftZFsPf.js";import{u as J}from"./useBridgeTypeValue-BhHkY53V.js";const X=()=>({createSSLForm:()=>({enable:!1,verify:G,certfile:"",keyfile:"",cacertfile:"",server_name_indication:""}),handleSSLDataBeforeSubmit:u=>{let a=g.cloneDeep(u);const c=["certfile","keyfile","cacertfile","server_name_indication"];return a.enable===!1?a=g.omit(a,c):c.forEach(l=>{a[l]||(a=g.omit(a,l))}),a}}),Y=n=>A.post("/connectors_probe",n),Q=n=>A.delete(`/connectors/${encodeURIComponent(n)}`),Z=async n=>{try{const o=await A.get(`/connectors/${encodeURIComponent(n)}`);return Promise.resolve(Object.assign(o,{id:R(o)}))}catch(o){return Promise.reject(o)}},ee=(n,o)=>A.put(`/connectors/${encodeURIComponent(n)}`,o),te=n=>A.post(`/connectors/${encodeURIComponent(n)}/start`),ne=(n,o)=>A.put(`/connectors/${encodeURIComponent(n)}/enable/${o}`),fe=async()=>{try{const n=await A.get("/connectors");return Promise.resolve(n.map(o=>(o.id=R(o),o)))}catch(n){return Promise.reject(n)}},oe=async n=>{try{const o=await A.post("/connectors",n);return Promise.resolve({...o,id:R(o)})}catch(o){return Promise.reject(o)}},re=()=>{const n=T(!1),{handleConnectorDataBeforeSubmit:o}=H();return{isTesting:n,testConnectivity:async a=>{try{n.value=!0;const c=await o(a);return await Y(c),n.value=!1,Promise.resolve()}catch{return n.value=!1,Promise.reject()}}}},se=()=>{const n=new RegExp(`${M}$`),{getBridgeGeneralType:o}=J(),u=r=>typeof r=="string"?"bridge":r.function===L.Console?L.Console:L.Republish,a=r=>{const{type:m,name:p}=r;return m===S.Webhook&&n.test(p)},c=r=>{const{type:m,name:p,rules:t}=r;return m===S.Webhook&&n.test(p)&&(t==null?void 0:t.length)>0?t.some(e=>e===p):!1},l=r=>{const{actions:m}=r;return Array.isArray(m)&&m.some(p=>u(p)==="bridge"&&typeof p=="string"&&o(p.slice(0,p==null?void 0:p.indexOf(":")))===S.Webhook)||!1},d=r=>n.test(r),f=r=>{const{id:m}=r;return d(m)&&l(r)},C=(r,m)=>r.enable&&m.enable;return{judgeIsWebhookConnector:a,judgeIsWebhookAction:c,judgeIsWebhookRuleId:d,judgeIsWebhookRule:f,getEnableStatus:C,joiningDataToWebhookList:(r,m,p)=>{const t=[...m],e=[...p];return t.reduce((i,h)=>{const{id:b}=h,k=e.findIndex(({actions:B})=>Array.isArray(B)&&B.includes(b)),P=k!==-1?e.splice(k,1)[0]:void 0,F=r.findIndex(({name:B})=>B===h.connector),j=F!==-1?r.splice(F,1)[0]:void 0;return i.concat(P&&j?{name:h.name,enable:C(h,P),action:h,connector:j,rule:P}:[])},[])}}},ce=()=>{const{handleConnectorDataBeforeSubmit:n,handleConnectorDataBeforeUpdate:o,handleConnectorDataForCopy:u,handleConnectorDataAfterLoaded:a}=H(),c=s=>a(s),l=async s=>{try{const y=await Z(s);return c(y)}catch(y){return console.error(y),Promise.reject(y)}},d=s=>{try{return u(s)}catch(y){return console.error(y),s}},f=async s=>{const y=await n(s);return oe(y)},C=async s=>{const{id:y}=s,_=await o(s);return Reflect.deleteProperty(_,"id"),ee(y,_)},D=async s=>Q(s),r=async s=>te(s),{operationWarning:m,confirmDel:p}=z(),{t}=E("RuleEngine"),e=async(s,y,_)=>{const w=y?"Base.enableSuccess":"Base.disabledSuccess";try{return y||await m(t("Base.confirmDisabled")),await ne(s,y),g.isFunction(_)&&_(),O.success(t(w)),Promise.resolve()}catch(v){return console.error(v),Promise.reject()}},i=T(!1),h=T(void 0),b=async(s,y)=>{const{enable:_,id:w,actions:v,sources:I}=s;if((v!=null&&v.length||I!=null&&I.length)&&_){h.value=s,i.value=!0;return}try{await e(w,!_,y)}catch{}},{isTesting:k,testConnectivity:P}=re(),F=async s=>P(s),j=T(!1),B=async s=>p(()=>D(s)),{judgeIsWebhookConnector:N}=se();return{getConnectorDetail:l,handleConnectorDataAfterLoaded:c,addConnector:f,updateConnector:C,deleteConnector:D,reconnectConnector:r,toggleConnectorEnable:e,showDisableConfirm:i,currentConnector:h,handleToggleConnectorEnable:b,handleDataForCopy:d,isTesting:k,testConnectivity:F,showDelTip:j,handleDeleteConnector:async(s,y)=>{const{id:_,actions:w,sources:v}=s;if(!N(s)){if(w&&w.length||v&&v.length){h.value=s,j.value=!0;return}try{await B(_),y()}catch{}}}}},ae=()=>{const{getConnectorDetail:n}=ce();return{checkIsIoTDBThriftConnector:async u=>{try{const a=R({type:S.IoTDB,name:u}),{driver:c}=await n(a),l=/thrift/i.test(c);return Promise.resolve(l)}catch(a){return Promise.reject(a)}}}},x=["node_status","status","status_reason","error","idForRuleFrom","actions","id","rules","last_modified_at"],$={saveAsCopy:["enable","id"],update:x,create:[...x,"enable","id"]},U=["type","name"],W=()=>{const{handleSSLDataBeforeSubmit:n}=X(),o=l=>{const d=g.cloneDeep(l);return d.ssl&&(d.ssl=n(d.ssl)),q(g.omit(d,$.update))},u=["password","authentication.password","authentication.jwt","secret_key","aws_secret_access_key","secret_access_key","token","security_token","access_key_id","access_key_secret"].reduce((l,d)=>[...l,d,`parameters.${d}`],[]);return{handleDataBeforeSubmit:o,likePasswordFieldKeys:u,handleDataForCopy:l=>{const d=g.omit(l,$.saveAsCopy);return u.forEach(f=>{g.get(d,f)!==void 0&&g.set(d,f,"")}),d},handleDataForSaveAsCopy:l=>g.omit(l,$.create)}},ie=["sources"],H=()=>{const{handleDataBeforeSubmit:n,likePasswordFieldKeys:o,handleDataForCopy:u,handleDataForSaveAsCopy:a}=W(),{tl:c}=E("RuleEngine"),l=e=>{if(e.service_account_json&&typeof e.service_account_json=="string")try{return e.service_account_json=JSON.parse(e.service_account_json),e}catch{return O.error(c("accountJSONError")),Promise.reject()}return e},d=new Map([[S.GCPProducer,l],[S.GCPConsumer,l]]),f=async e=>{try{let i=g.cloneDeep(e);const h=e.type,b=d.get(h);return b&&(i=await b(i)),i=n(i),Promise.resolve(g.omit(i,ie))}catch(i){return console.error(i),Promise.reject()}},C=async e=>{const i=await f(e);return g.omit(i,U)},D=u,r=a,m=e=>("service_account_json"in e&&typeof e.service_account_json=="object"&&(e.service_account_json=K(e.service_account_json,2)),e),p=new Map([[S.GCPProducer,m],[S.GCPConsumer,m]]);return{likePasswordFieldKeys:o,handleConnectorDataBeforeSubmit:f,handleConnectorDataBeforeUpdate:C,handleConnectorDataForCopy:D,handleConnectorDataForSaveAsCopy:r,handleConnectorDataAfterLoaded:e=>{const{type:i}=e,h=p.get(i);return h&&h(e),e}}},le=()=>{const{tl:n}=E("RuleEngine"),o=/('(([^'\\]|(\\')|\\))+')|("(([^"\\]|(\\")|\\))+")/g,u=/[^\s"']+/,a=new RegExp(`^((${o.source}|${u.source})\\s)*(${o.source}|${u.source})$`),c=" ";return{commandReg:a,splitBySpace:f=>{const C=V(),D=[],r=f.replace(/\n/g,c).trim();if(!a.test(r))return O.error(n("redisCommandError")),Promise.reject();const p=r.replace(/\n/g,c).replace(o,e=>(D.push(e.slice(1,-1)),C)).split(c);let t=0;return p.map(e=>e===C?(t+=1,D[t-1]):e).filter(e=>!!e)},transCommandArrToStr:f=>f.reduce((C,D)=>{const r=D.indexOf(c)>-1||D.indexOf("\\")>-1?`"${D}"`:D;return C?`${C} ${r}`:r},"")}},Ce=()=>{const{likePasswordFieldKeys:n,handleDataForCopy:o}=W(),u=c=>c;return{likePasswordFieldKeys:n,handleBridgeDataAfterLoaded:u,handleBridgeDataForCopy:c=>u(o(c))}},De=()=>{const{handleDataBeforeSubmit:n}=W(),{splitBySpace:o,transCommandArrToStr:u}=le(),a=async t=>{var e;try{return(e=t==null?void 0:t.parameters)!=null&&e.command_template&&typeof t.parameters.command_template=="string"&&(t.parameters.command_template=await o(t.parameters.command_template)),t}catch(i){return console.error(i),Promise.reject()}},c=async t=>{var e;return/direct/i.test((e=t==null?void 0:t.parameters)==null?void 0:e.mode)&&(t.resource_opts.batch_size=1),t},{checkIsIoTDBThriftConnector:l}=ae(),d=async t=>{var h;const{connector:e}=t;return await l(e)&&/async/i.test((h=t.resource_opts)==null?void 0:h.query_mode)&&(t.resource_opts.query_mode="sync"),t},f=new Map([[S.Redis,a],[S.S3,c],[S.AzureBlobStorage,c],[S.IoTDB,d]]),C=async t=>{try{let e=g.cloneDeep(t);const i=f.get(e.type);return i&&(e=await i(e)),Promise.resolve(await n(e))}catch(e){return console.error(e),Promise.reject()}},D=async t=>{const e=await C(t);return g.omit(e,U)},r=t=>{var e;return(e=t==null?void 0:t.parameters)!=null&&e.command_template&&Array.isArray(t.parameters.command_template)&&(t.parameters.command_template=u(t.parameters.command_template)),t},m=new Map([[S.Redis,r]]);return{handleActionDataBeforeSubmit:C,handleActionDataBeforeUpdate:D,handleActionDataAfterLoaded:t=>{const e=m.get(t.type);return e&&e(t),t}}};export{ae as a,Ce as b,De as c,le as d,ce as e,H as f,fe as g,X as h,ne as p,se as u};
