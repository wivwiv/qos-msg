# This file is generated. Do not edit.
# The configs are results of online config changes from UI/API/CLI.
# To persist configs in this file, copy the content to etc/base.hocon.
actions {
  mysql {
    save-msg-log {
      connector = local0mysql
      created_at = 1747650543681
      enable = true
      fallback_actions = []
      last_modified_at = 1747728807308
      parameters {
        sql = """~
          INSERT INTO message_logs(
            mid, topic, qos, event, from_clientid, clientid, status
          ) VALUES (${id}, ${topic}, ${qos}, ${event}, ${from_clientid}, ${clientid}, '完成');~"""
        undefined_vars_as_null = false
      }
      resource_opts {
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "15s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = async
        request_ttl = "45s"
        worker_pool_size = 16
      }
    }
    save-msg-payload {
      connector = local0mysql
      created_at = 1747648382481
      enable = true
      fallback_actions = []
      last_modified_at = 1747729220122
      parameters {
        sql = """~
          INSERT INTO message_detail(
              mid, topic, qos, from_clientid, size, publish_received_time, payload
          ) VALUES 
          (
            ${id},
            ${topic},
            ${qos},
            ${clientid}, ${size}, ${timestamp}, ${payload});~"""
        undefined_vars_as_null = false
      }
      resource_opts {
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "15s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = async
        request_ttl = "45s"
        worker_pool_size = 16
      }
    }
    save-sub-logs {
      connector = local0mysql
      created_at = 1747663042795
      description = "保存订阅历史"
      enable = true
      fallback_actions = []
      last_modified_at = 1747663042795
      parameters {
        sql = """~
          INSERT INTO subscribe_logs(
            clientid,
            qos,
            topic,
            event
          ) VALUES (
            ${clientid},
            ${qos},
            ${topic},
            ${event}
          );~"""
        undefined_vars_as_null = false
      }
      resource_opts {
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "15s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = async
        request_ttl = "45s"
        worker_pool_size = 16
      }
    }
    update-msg-drop-status {
      connector = local0mysql
      created_at = 1747650116559
      description = ""
      enable = true
      fallback_actions = []
      last_modified_at = 1747650116559
      parameters {
        sql = "update message_detail set drop_time = ${timestamp}, status = '已丢弃' where mid = ${id};"
        undefined_vars_as_null = false
      }
      resource_opts {
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "15s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = async
        request_ttl = "45s"
        worker_pool_size = 16
      }
    }
    update-status-latency {
      connector = local0mysql
      created_at = 1747650006538
      enable = true
      fallback_actions = []
      last_modified_at = 1747729144477
      parameters {
        sql = """~
          update message_detail 
            set clientid = ${clientid}, 
            acked_time = ${timestamp}, 
            status = '已接收', 
            latency = ${timestamp} - publish_received_time 
          where mid = ${id};~"""
        undefined_vars_as_null = false
      }
      resource_opts {
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "15s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = async
        request_ttl = "45s"
        worker_pool_size = 16
      }
    }
  }
}
authentication = [
  {
    acl_claim_name = acl
    algorithm = "hmac-based"
    disconnect_after_expire = true
    enable = false
    from = password
    mechanism = jwt
    precondition = ""
    secret = emqxsecret
    secret_base64_encoded = false
    use_jwks = false
    verify_claims {}
  }
]
connectors {
  mysql {
    local0mysql {
      database = iot_data
      password = public
      pool_size = 8
      resource_opts {
        health_check_interval = "15s"
        start_timeout = "5s"
      }
      server = "mysql-idea:3306"
      ssl {enable = false, verify = verify_peer}
      username = root
    }
  }
}
log {
  audit {
    enable = false
    ignore_high_frequency_request = true
    level = info
    max_filter_size = 5000
    path = "${EMQX_LOG_DIR}/audit.log"
    payload_encode = text
    rotation_count = 10
    rotation_size = "50MB"
    time_offset = system
    timestamp_format = auto
  }
  console {
    enable = true
    formatter = text
    level = warning
    payload_encode = text
    time_offset = system
    timestamp_format = auto
  }
  file {
    default {
      enable = true
      formatter = text
      level = warning
      path = "${EMQX_LOG_DIR}/emqx.log"
      payload_encode = text
      rotation_count = 10
      rotation_size = "50MB"
      time_offset = system
      timestamp_format = auto
    }
  }
  throttling {
    time_window = "1m"
  }
}
rule_engine {
  ignore_sys_message = true
  jq_function_default_timeout = "10s"
  rules {
    save-msg {
      actions = [
        "mysql:save-msg-payload"
      ]
      description = ""
      enable = true
      metadata {last_modified_at = 1747729458436}
      name = ""
      sql = """~
        SELECT
          *,
          bytesize(payload) as size
        FROM
          "#"~"""
    }
    save-msg-logs {
      actions = [
        "mysql:save-msg-log"
      ]
      description = ""
      enable = true
      metadata {last_modified_at = 1747729442499}
      name = ""
      sql = """~
        SELECT
          *,
          coalesce(from_clientid, clientid) as from_clientid
        FROM
          "#",
          "$events/message_dropped",
          "$events/message_acked",
          "$events/message_delivered",
          "$events/delivery_dropped"~"""
    }
    sub-logs {
      actions = [
        "mysql:save-sub-logs"
      ]
      description = "订阅历史"
      enable = true
      metadata {created_at = 1747663044818, last_modified_at = 1747663044818}
      name = ""
      sql = """~
        SELECT
          *
        FROM
          "$events/session_subscribed",
          "$events/session_unsubscribed"~"""
    }
    update-msg-dropped {
      actions = [
        "mysql:update-msg-drop-status"
      ]
      description = ""
      enable = true
      metadata {created_at = 1747650125411, last_modified_at = 1747650125411}
      name = ""
      sql = """~
        SELECT
          id,
          timestamp
        FROM
          "$events/message_dropped"~"""
    }
    update-msg-latency {
      actions = [
        "mysql:update-status-latency"
      ]
      description = ""
      enable = true
      metadata {last_modified_at = 1747729177883}
      name = ""
      sql = """~
        SELECT
          id,
          timestamp,
          clientid
        FROM
          "$events/message_acked"~"""
    }
  }
}
