# This file is generated. Do not edit.
# The configs are results of online config changes from UI/API/CLI.
# To persist configs in this file, copy the content to etc/base.hocon.
api_key = {
  bootstrap_file = "data/default_api_key.conf"
}
actions {
  http {
    send-to-webhook {
      connector = "public-web-server"
      created_at = 1748253893647
      description = ""
      enable = true
      fallback_actions = []
      last_modified_at = 1748253893647
      parameters {
        headers {content-type = "application/json"}
        max_retries = 2
        method = post
      }
      resource_opts {
        health_check_interval = "15s"
        health_check_timeout = "60s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = async
        request_ttl = "45s"
        worker_pool_size = 16
      }
    }
  }
  mysql {
    save-msg-log {
      connector = local0mysql
      created_at = 1747650543681
      description = ""
      enable = true
      fallback_actions = []
      last_modified_at = 1747728807308
      parameters {
        sql = """~
          INSERT INTO message_logs(
            mid, topic, qos, event, from_clientid, clientid, status
          ) VALUES (${id}, ${topic}, ${qos}, ${event}, ${from_clientid}, ${clientid}, '完成');~"""
        undefined_vars_as_null = false
      }
      resource_opts {
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "15s"
        health_check_timeout = "60s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = async
        request_ttl = "45s"
        worker_pool_size = 16
      }
    }
    save-msg-payload {
      connector = local0mysql
      created_at = 1747648382481
      description = ""
      enable = true
      fallback_actions = []
      last_modified_at = 1747729220122
      parameters {
        sql = """~
          INSERT INTO message_detail(
              mid, topic, qos, from_clientid, size, publish_received_time, payload
          ) VALUES 
          (
            ${id},
            ${topic},
            ${qos},
            ${clientid}, ${size}, ${timestamp}, ${payload});~"""
        undefined_vars_as_null = false
      }
      resource_opts {
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "15s"
        health_check_timeout = "60s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = async
        request_ttl = "45s"
        worker_pool_size = 16
      }
    }
    save-sub-logs {
      connector = local0mysql
      created_at = 1747663042795
      description = "保存订阅历史"
      enable = true
      fallback_actions = []
      last_modified_at = 1747663042795
      parameters {
        sql = """~
          INSERT INTO subscribe_logs(
            clientid,
            qos,
            topic,
            event
          ) VALUES (
            ${clientid},
            ${qos},
            ${topic},
            ${event}
          );~"""
        undefined_vars_as_null = false
      }
      resource_opts {
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "15s"
        health_check_timeout = "60s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = async
        request_ttl = "45s"
        worker_pool_size = 16
      }
    }
    update-msg-drop-status {
      connector = local0mysql
      created_at = 1747650116559
      description = ""
      enable = true
      fallback_actions = []
      last_modified_at = 1747650116559
      parameters {
        sql = "update message_detail set drop_time = ${timestamp}, status = '已丢弃' where mid = ${id};"
        undefined_vars_as_null = false
      }
      resource_opts {
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "15s"
        health_check_timeout = "60s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = async
        request_ttl = "45s"
        worker_pool_size = 16
      }
    }
    update-status-latency {
      connector = local0mysql
      created_at = 1747650006538
      description = ""
      enable = true
      fallback_actions = []
      last_modified_at = 1747729144477
      parameters {
        sql = """~
          update message_detail 
            set clientid = ${clientid}, 
            acked_time = ${timestamp}, 
            status = '已接收', 
            latency = ${timestamp} - publish_received_time 
          where mid = ${id};~"""
        undefined_vars_as_null = false
      }
      resource_opts {
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "15s"
        health_check_timeout = "60s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = async
        request_ttl = "45s"
        worker_pool_size = 16
      }
    }
  }
  redis {
    clean-latency-list {
      connector = "redis-local"
      created_at = 1752660290219
      description = ""
      enable = true
      fallback_actions = []
      last_modified_at = 1752660290219
      parameters {
        command_template = [
          LTRIM,
          "msg:latency:${qos}",
          "0",
          "29"
        ]
      }
      resource_opts {
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "15s"
        health_check_timeout = "60s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = async
        request_ttl = "45s"
        worker_pool_size = 16
      }
    }
    msg-drop {
      connector = "redis-local"
      created_at = 1748248799889
      description = ""
      enable = true
      fallback_actions = []
      last_modified_at = 1748249383920
      parameters {
        command_template = [
          HINCRBY,
          "msg_drop:${clientid}",
          "${topic}",
          "1"
        ]
      }
      resource_opts {
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "3s"
        health_check_timeout = "60s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = async
        request_ttl = "45s"
        worker_pool_size = 16
      }
    }
    set-latency {
      connector = "redis-local"
      created_at = 1752659188795
      enable = true
      fallback_actions = []
      last_modified_at = 1752742523618
      parameters {
        command_template = [
          LPUSH,
          "msg:latency:${qos}",
          """{"publish_received_at": ${publish_received_at}, "acked_at": ${timestamp}}"""
        ]
      }
      resource_opts {
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "15s"
        health_check_timeout = "60s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = async
        request_ttl = "45s"
        worker_pool_size = 16
      }
    }
  }
}
authentication = [
  {
    acl_claim_name = acl
    algorithm = "hmac-based"
    disconnect_after_expire = true
    enable = false
    from = password
    mechanism = jwt
    precondition = ""
    secret = emqxsecret
    secret_base64_encoded = false
    use_jwks = false
    verify_claims {}
  }
]
connectors {
  http {
    public-web-server {
      connect_timeout = "15s"
      enable_pipelining = 100
      headers {content-type = "application/json"}
      max_inactive = "10s"
      pool_size = 8
      pool_type = random
      resource_opts {
        health_check_interval = "15s"
        start_timeout = "5s"
      }
      ssl {enable = true, verify = verify_none}
      url = "https://webhook.site/beb420ae-1fe0-4c61-adbe-821d9801cd27"
    }
  }
  mysql {
    local0mysql {
      database = iot_data
      description = ""
      enable = true
      password = public
      pool_size = 8
      resource_opts {
        health_check_interval = "15s"
        start_after_created = true
        start_timeout = "5s"
      }
      server = "mysql-idea:3306"
      ssl {
        ciphers = []
        depth = 10
        enable = false
        hibernate_after = "5s"
        log_level = notice
        reuse_sessions = true
        secure_renegotiate = true
        verify = verify_peer
        versions = [
          "tlsv1.3",
          "tlsv1.2"
        ]
      }
      username = root
    }
  }
  redis {
    redis-local {
      description = ""
      enable = true
      parameters {
        database = 0
        pool_size = 8
        redis_type = single
        server = "redis-idea:6379"
      }
      resource_opts {
        health_check_interval = "15s"
        start_after_created = true
        start_timeout = "5s"
      }
      ssl {
        ciphers = []
        depth = 10
        enable = false
        hibernate_after = "5s"
        log_level = notice
        reuse_sessions = true
        secure_renegotiate = true
        verify = verify_peer
        versions = [
          "tlsv1.3",
          "tlsv1.2"
        ]
      }
    }
  }
}
listeners {
  ssl {
    default {
      acceptors = 16
      access_rules = [
        "allow all"
      ]
      bind = "0.0.0.0:8883"
      enable = true
      enable_authn = true
      max_connections = infinity
      mountpoint = ""
      parse_unit = chunk
      proxy_protocol = false
      proxy_protocol_timeout = "3s"
      ssl_options {
        cacertfile = "${EMQX_ETC_DIR}/certs/cacert.pem"
        certfile = "${EMQX_ETC_DIR}/certs/cert.pem"
        ciphers = []
        client_renegotiation = true
        depth = 10
        enable_crl_check = false
        fail_if_no_peer_cert = false
        gc_after_handshake = false
        handshake_timeout = "15s"
        hibernate_after = "5s"
        honor_cipher_order = true
        keyfile = "${EMQX_ETC_DIR}/certs/key.pem"
        log_level = notice
        ocsp {
          enable_ocsp_stapling = false
          refresh_http_timeout = "15s"
          refresh_interval = "5m"
        }
        reuse_sessions = true
        secure_renegotiate = true
        verify = verify_none
        versions = [
          "tlsv1.3",
          "tlsv1.2"
        ]
      }
      tcp_options {
        active_n = 100
        backlog = 1024
        buffer = "4KB"
        high_watermark = "1MB"
        keepalive = none
        nodelay = true
        nolinger = false
        reuseaddr = true
        send_timeout = "15s"
        send_timeout_close = true
      }
      zone = default
    }
  }
  tcp {
    default {
      acceptors = 16
      access_rules = [
        "allow all"
      ]
      bind = "0.0.0.0:1883"
      enable = true
      enable_authn = true
      max_connections = infinity
      messages_rate = "10/s"
      mountpoint = ""
      parse_unit = chunk
      proxy_protocol = false
      proxy_protocol_timeout = "3s"
      tcp_options {
        active_n = 100
        backlog = 1024
        buffer = "4KB"
        high_watermark = "1MB"
        keepalive = none
        nodelay = true
        nolinger = false
        reuseaddr = true
        send_timeout = "15s"
        send_timeout_close = true
      }
      zone = default
    }
  }
  ws {
    default {
      acceptors = 16
      access_rules = [
        "allow all"
      ]
      bind = "0.0.0.0:8083"
      enable = true
      enable_authn = true
      max_connections = infinity
      mountpoint = ""
      proxy_protocol = false
      proxy_protocol_timeout = "3s"
      tcp_options {
        active_n = 100
        backlog = 1024
        buffer = "4KB"
        high_watermark = "1MB"
        keepalive = none
        nodelay = true
        nolinger = false
        reuseaddr = true
        send_timeout = "15s"
        send_timeout_close = true
      }
      websocket {
        allow_origin_absence = true
        check_origin_enable = false
        check_origins = "http://localhost:18083, http://127.0.0.1:18083"
        compress = false
        deflate_opts {
          client_context_takeover = takeover
          client_max_window_bits = 15
          mem_level = 8
          server_context_takeover = takeover
          server_max_window_bits = 15
          strategy = default
        }
        fail_if_no_subprotocol = true
        idle_timeout = "7200s"
        max_frame_size = infinity
        mqtt_path = "/mqtt"
        mqtt_piggyback = multiple
        proxy_address_header = "x-forwarded-for"
        proxy_port_header = "x-forwarded-port"
        supported_subprotocols = "mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5"
        validate_utf8 = true
      }
      zone = default
    }
  }
  wss {
    default {
      acceptors = 16
      access_rules = [
        "allow all"
      ]
      bind = "0.0.0.0:8084"
      enable = true
      enable_authn = true
      max_connections = infinity
      mountpoint = ""
      proxy_protocol = false
      proxy_protocol_timeout = "3s"
      ssl_options {
        cacertfile = "${EMQX_ETC_DIR}/certs/cacert.pem"
        certfile = "${EMQX_ETC_DIR}/certs/cert.pem"
        ciphers = []
        client_renegotiation = true
        depth = 10
        fail_if_no_peer_cert = false
        handshake_timeout = "15s"
        hibernate_after = "5s"
        honor_cipher_order = true
        keyfile = "${EMQX_ETC_DIR}/certs/key.pem"
        log_level = notice
        reuse_sessions = true
        secure_renegotiate = true
        verify = verify_none
        versions = [
          "tlsv1.3",
          "tlsv1.2"
        ]
      }
      tcp_options {
        active_n = 100
        backlog = 1024
        buffer = "4KB"
        high_watermark = "1MB"
        keepalive = none
        nodelay = true
        nolinger = false
        reuseaddr = true
        send_timeout = "15s"
        send_timeout_close = true
      }
      websocket {
        allow_origin_absence = true
        check_origin_enable = false
        check_origins = "http://localhost:18083, http://127.0.0.1:18083"
        compress = false
        deflate_opts {
          client_context_takeover = takeover
          client_max_window_bits = 15
          mem_level = 8
          server_context_takeover = takeover
          server_max_window_bits = 15
          strategy = default
        }
        fail_if_no_subprotocol = true
        idle_timeout = "7200s"
        max_frame_size = infinity
        mqtt_path = "/mqtt"
        mqtt_piggyback = multiple
        proxy_address_header = "x-forwarded-for"
        proxy_port_header = "x-forwarded-port"
        supported_subprotocols = "mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5"
        validate_utf8 = true
      }
      zone = default
    }
  }
}
log {
  audit {
    enable = false
    ignore_high_frequency_request = true
    level = info
    max_filter_size = 5000
    path = "${EMQX_LOG_DIR}/audit.log"
    payload_encode = text
    rotation_count = 10
    rotation_size = "50MB"
    time_offset = system
    timestamp_format = auto
  }
  console {
    enable = true
    formatter = text
    level = warning
    payload_encode = text
    time_offset = system
    timestamp_format = auto
  }
  file {
    default {
      enable = true
      formatter = text
      level = warning
      path = "${EMQX_LOG_DIR}/emqx.log"
      payload_encode = text
      rotation_count = 10
      rotation_size = "50MB"
      time_offset = system
      timestamp_format = auto
    }
  }
  throttling {
    time_window = "1m"
  }
}
message_transformation {
  transformations = [
    {
      description = ""
      failure_action = drop
      log_failure {level = warning}
      name = jiami
      operations = [
        {key = payload, value = payload}
      ]
      payload_decoder {type = none}
      payload_encoder {schema = encrypt, type = external_http}
      topics = [
        "#"
      ]
    }
  ]
}
mqtt {
  await_rel_timeout = "300s"
  client_attrs_init = []
  clientid_override = disabled
  exclusive_subscription = false
  idle_timeout = "15s"
  ignore_loop_deliver = false
  keepalive_check_interval = "30s"
  keepalive_multiplier = 1.5
  max_awaiting_rel = 100
  max_clientid_len = 65535
  max_inflight = 32
  max_mqueue_len = 10
  max_packet_size = "1MB"
  max_qos_allowed = 2
  max_subscriptions = infinity
  max_topic_alias = 65535
  max_topic_levels = 128
  message_expiry_interval = infinity
  mqueue_default_priority = lowest
  mqueue_priorities = disabled
  mqueue_store_qos0 = true
  peer_cert_as_clientid = disabled
  peer_cert_as_username = disabled
  response_information = ""
  retain_available = true
  retry_interval = infinity
  server_keepalive = disabled
  session_expiry_interval = "100s"
  shared_subscription = true
  shared_subscription_initial_sticky_pick = random
  shared_subscription_strategy = round_robin
  strict_mode = false
  upgrade_qos = false
  use_username_as_clientid = false
  wildcard_subscription = true
}
rule_engine {
  ignore_sys_message = true
  jq_function_default_timeout = "10s"
  rules {
    client-notify {
      actions = [
        {function = console},
        "http:send-to-webhook"
      ]
      description = ""
      enable = true
      metadata {last_modified_at = 1748253895973}
      name = ""
      sql = """~
        SELECT
          *
        FROM
          "$events/client_connected",
          "$events/sys/alarm_activated",
          "$events/sys/alarm_deactivated",
          "$events/client_disconnected"~"""
    }
    redis-msg-drop {
      actions = [
        "redis:msg-drop"
      ]
      description = ""
      enable = true
      metadata {created_at = 1748248802884, last_modified_at = 1748248802884}
      name = ""
      sql = """~
        SELECT
          *
        FROM
          "$events/message_dropped"~"""
    }
    save-msg {
      actions = [
        "mysql:save-msg-payload"
      ]
      description = ""
      enable = true
      metadata {last_modified_at = 1747729458436}
      name = ""
      sql = """~
        SELECT
          *,
          bytesize(payload) as size
        FROM
          "#"~"""
    }
    save-msg-logs {
      actions = [
        "mysql:save-msg-log"
      ]
      description = ""
      enable = true
      metadata {last_modified_at = 1747729442499}
      name = ""
      sql = """~
        SELECT
          *,
          coalesce(from_clientid, clientid) as from_clientid
        FROM
          "#",
          "$events/message_dropped",
          "$events/message_acked",
          "$events/message_delivered",
          "$events/delivery_dropped"~"""
    }
    set-qos {
      actions = [
        "redis:set-latency",
        "redis:clean-latency-list"
      ]
      description = ""
      enable = true
      metadata {last_modified_at = 1752742529480}
      name = ""
      sql = """~
        SELECT
          *
        FROM
          "$events/message/acked"~"""
    }
    sub-logs {
      actions = [
        "mysql:save-sub-logs"
      ]
      description = "订阅历史"
      enable = true
      metadata {created_at = 1747663044818, last_modified_at = 1747663044818}
      name = ""
      sql = """~
        SELECT
          *
        FROM
          "$events/session_subscribed",
          "$events/session_unsubscribed"~"""
    }
    update-msg-dropped {
      actions = [
        "mysql:update-msg-drop-status"
      ]
      description = ""
      enable = true
      metadata {created_at = 1747650125411, last_modified_at = 1747650125411}
      name = ""
      sql = """~
        SELECT
          id,
          timestamp
        FROM
          "$events/message_dropped"~"""
    }
    update-msg-latency {
      actions = [
        "mysql:update-status-latency"
      ]
      description = ""
      enable = true
      metadata {last_modified_at = 1747729177883}
      name = ""
      sql = """~
        SELECT
          id,
          timestamp,
          clientid
        FROM
          "$events/message_acked"~"""
    }
  }
}
schema_registry {
  external {}
  schemas {
    encrypt {
      parameters {
        connect_timeout = "15s"
        enable_pipelining = 100
        headers {}
        max_inactive = "10s"
        max_retries = 2
        pool_size = 8
        pool_type = random
        request_timeout = "10s"
        ssl {
          enable = false
          middlebox_comp_mode = true
          verify = verify_peer
        }
        url = "http://192.168.55.22:8080/api/v5.1/spu-encryption"
      }
      type = external_http
    }
  }
}
topic_metrics = [
  {topic = "t/1"}
]
